package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.AccountProductPlan;
import com.gnoras.maple.dal.model.AccountProductPlanAdjustment;
import com.gnoras.maple.dal.model.Offering;
import com.gnoras.maple.dal.model.PlanText;
import com.gnoras.maple.dal.model.interfaces.IProductPlan;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: product_plan.
 * @author autogenerated
 */

@Entity
@Table(name = "product_plan", catalog = "maple")
public class ProductPlan implements Cloneable, Serializable, IPojoGenEntity, IProductPlan {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024022L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<AccountProductPlan> accountProductPlans = new HashSet<AccountProductPlan>();

	/** Field mapping. */
	private Set<AccountProductPlanAdjustment> accountProductPlanAdjustments = new HashSet<AccountProductPlanAdjustment>();

	/** Field mapping. */
	private Long createdAt;
	/** Field mapping. */
	private Long deletedAt;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private Integer maxChildren;
	/** Field mapping. */
	private Integer maxChoreAlertsPerWk;
	/** Field mapping. */
	private Set<Offering> offerings = new HashSet<Offering>();

	/** Field mapping. */
	private Set<PlanText> planTexts = new HashSet<PlanText>();

	/** Field mapping. */
	private Integer planDays;
	/** Field mapping. */
	private Integer reportLevel;
	/** Field mapping. */
	private Integer rewardLevel;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public ProductPlan() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public ProductPlan(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createdAt Long object;
	 * @param deletedAt Long object;
	 * @param id Integer object;
	 * @param maxChildren Integer object;
	 * @param maxChoreAlertsPerWk Integer object;
	 * @param planDays Integer object;
	 * @param reportLevel Integer object;
	 * @param rewardLevel Integer object;
	 */
	public ProductPlan(Long createdAt, Long deletedAt, Integer id, 					
			Integer maxChildren, Integer maxChoreAlertsPerWk, Integer planDays, 					
			Integer reportLevel, Integer rewardLevel) {

		this.createdAt = createdAt;
		this.deletedAt = deletedAt;
		this.id = id;
		this.maxChildren = maxChildren;
		this.maxChoreAlertsPerWk = maxChoreAlertsPerWk;
		this.planDays = planDays;
		this.reportLevel = reportLevel;
		this.rewardLevel = rewardLevel;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return ProductPlan.class;
	}
 

    /**
     * Return the value associated with the column: accountProductPlan.
	 * @return A Set&lt;AccountProductPlan&gt; object (this.accountProductPlan)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "productPlan"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<AccountProductPlan> getAccountProductPlans() {
		return this.accountProductPlans;
		
	}
	
	/**
	 * Adds a bi-directional link of type AccountProductPlan to the accountProductPlans set.
	 * @param accountProductPlan item to add
	 */
	public void addAccountProductPlan(AccountProductPlan accountProductPlan) {
		accountProductPlan.setProductPlan(this);
		this.accountProductPlans.add(accountProductPlan);
	}

  
    /**  
     * Set the value related to the column: accountProductPlan.
	 * @param accountProductPlan the accountProductPlan value you wish to set
	 */
	public void setAccountProductPlans(final Set<AccountProductPlan> accountProductPlan) {
		this.accountProductPlans = accountProductPlan;
	}

    /**
     * Return the value associated with the column: accountProductPlanAdjustment.
	 * @return A Set&lt;AccountProductPlanAdjustment&gt; object (this.accountProductPlanAdjustment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "productPlan"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<AccountProductPlanAdjustment> getAccountProductPlanAdjustments() {
		return this.accountProductPlanAdjustments;
		
	}
	
	/**
	 * Adds a bi-directional link of type AccountProductPlanAdjustment to the accountProductPlanAdjustments set.
	 * @param accountProductPlanAdjustment item to add
	 */
	public void addAccountProductPlanAdjustment(AccountProductPlanAdjustment accountProductPlanAdjustment) {
		accountProductPlanAdjustment.setProductPlan(this);
		this.accountProductPlanAdjustments.add(accountProductPlanAdjustment);
	}

  
    /**  
     * Set the value related to the column: accountProductPlanAdjustment.
	 * @param accountProductPlanAdjustment the accountProductPlanAdjustment value you wish to set
	 */
	public void setAccountProductPlanAdjustments(final Set<AccountProductPlanAdjustment> accountProductPlanAdjustment) {
		this.accountProductPlanAdjustments = accountProductPlanAdjustment;
	}

    /**
     * Return the value associated with the column: createdAt.
	 * @return A Long object (this.createdAt)
	 */
	@Mandatory
	@Column( name = "created_at"  )
	public Long getCreatedAt() {
		return this.createdAt;
		
	}
	

  
    /**  
     * Set the value related to the column: createdAt.
	 * @param createdAt the createdAt value you wish to set
	 */
	public void setCreatedAt(final Long createdAt) {
		this.createdAt = createdAt;
	}

    /**
     * Return the value associated with the column: deletedAt.
	 * @return A Long object (this.deletedAt)
	 */
	@Mandatory
	@Column( name = "deleted_at"  )
	public Long getDeletedAt() {
		return this.deletedAt;
		
	}
	

  
    /**  
     * Set the value related to the column: deletedAt.
	 * @param deletedAt the deletedAt value you wish to set
	 */
	public void setDeletedAt(final Long deletedAt) {
		this.deletedAt = deletedAt;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Mandatory
	@Column( name = "id"  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: maxChildren.
	 * @return A Integer object (this.maxChildren)
	 */
	@Mandatory
	@Column( name = "max_children"  )
	public Integer getMaxChildren() {
		return this.maxChildren;
		
	}
	

  
    /**  
     * Set the value related to the column: maxChildren.
	 * @param maxChildren the maxChildren value you wish to set
	 */
	public void setMaxChildren(final Integer maxChildren) {
		this.maxChildren = maxChildren;
	}

    /**
     * Return the value associated with the column: maxChoreAlertsPerWk.
	 * @return A Integer object (this.maxChoreAlertsPerWk)
	 */
	@Mandatory
	@Column( name = "max_chore_alerts_per_wk"  )
	public Integer getMaxChoreAlertsPerWk() {
		return this.maxChoreAlertsPerWk;
		
	}
	

  
    /**  
     * Set the value related to the column: maxChoreAlertsPerWk.
	 * @param maxChoreAlertsPerWk the maxChoreAlertsPerWk value you wish to set
	 */
	public void setMaxChoreAlertsPerWk(final Integer maxChoreAlertsPerWk) {
		this.maxChoreAlertsPerWk = maxChoreAlertsPerWk;
	}

    /**
     * Return the value associated with the column: offering.
	 * @return A Set&lt;Offering&gt; object (this.offering)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "productPlan"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<Offering> getOfferings() {
		return this.offerings;
		
	}
	
	/**
	 * Adds a bi-directional link of type Offering to the offerings set.
	 * @param offering item to add
	 */
	public void addOffering(Offering offering) {
		offering.setProductPlan(this);
		this.offerings.add(offering);
	}

  
    /**  
     * Set the value related to the column: offering.
	 * @param offering the offering value you wish to set
	 */
	public void setOfferings(final Set<Offering> offering) {
		this.offerings = offering;
	}

    /**
     * Return the value associated with the column: planText.
	 * @return A Set&lt;PlanText&gt; object (this.planText)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "productPlan"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<PlanText> getPlanTexts() {
		return this.planTexts;
		
	}
	
	/**
	 * Adds a bi-directional link of type PlanText to the planTexts set.
	 * @param planText item to add
	 */
	public void addPlanText(PlanText planText) {
		planText.setProductPlan(this);
		this.planTexts.add(planText);
	}

  
    /**  
     * Set the value related to the column: planText.
	 * @param planText the planText value you wish to set
	 */
	public void setPlanTexts(final Set<PlanText> planText) {
		this.planTexts = planText;
	}

    /**
     * Return the value associated with the column: planDays.
	 * @return A Integer object (this.planDays)
	 */
	@Mandatory
	@Column( name = "plan_days"  )
	public Integer getPlanDays() {
		return this.planDays;
		
	}
	

  
    /**  
     * Set the value related to the column: planDays.
	 * @param planDays the planDays value you wish to set
	 */
	public void setPlanDays(final Integer planDays) {
		this.planDays = planDays;
	}

    /**
     * Return the value associated with the column: reportLevel.
	 * @return A Integer object (this.reportLevel)
	 */
	@Mandatory
	@Column( name = "report_level"  )
	public Integer getReportLevel() {
		return this.reportLevel;
		
	}
	

  
    /**  
     * Set the value related to the column: reportLevel.
	 * @param reportLevel the reportLevel value you wish to set
	 */
	public void setReportLevel(final Integer reportLevel) {
		this.reportLevel = reportLevel;
	}

    /**
     * Return the value associated with the column: rewardLevel.
	 * @return A Integer object (this.rewardLevel)
	 */
	@Mandatory
	@Column( name = "reward_level"  )
	public Integer getRewardLevel() {
		return this.rewardLevel;
		
	}
	

  
    /**  
     * Set the value related to the column: rewardLevel.
	 * @param rewardLevel the rewardLevel value you wish to set
	 */
	public void setRewardLevel(final Integer rewardLevel) {
		this.rewardLevel = rewardLevel;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public ProductPlan clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final ProductPlan copy = new ProductPlan();

		if (this.getAccountProductPlans() != null) {
			copy.getAccountProductPlans().addAll(this.getAccountProductPlans());
		}
		if (this.getAccountProductPlanAdjustments() != null) {
			copy.getAccountProductPlanAdjustments().addAll(this.getAccountProductPlanAdjustments());
		}
		copy.setCreatedAt(this.getCreatedAt());
		copy.setDeletedAt(this.getDeletedAt());
		copy.setId(this.getId());
		copy.setMaxChildren(this.getMaxChildren());
		copy.setMaxChoreAlertsPerWk(this.getMaxChoreAlertsPerWk());
		if (this.getOfferings() != null) {
			copy.getOfferings().addAll(this.getOfferings());
		}
		if (this.getPlanTexts() != null) {
			copy.getPlanTexts().addAll(this.getPlanTexts());
		}
		copy.setPlanDays(this.getPlanDays());
		copy.setReportLevel(this.getReportLevel());
		copy.setRewardLevel(this.getRewardLevel());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createdAt: " + this.getCreatedAt() + ", ");
		sb.append("deletedAt: " + this.getDeletedAt() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("maxChildren: " + this.getMaxChildren() + ", ");
		sb.append("maxChoreAlertsPerWk: " + this.getMaxChoreAlertsPerWk() + ", ");
		sb.append("planDays: " + this.getPlanDays() + ", ");
		sb.append("reportLevel: " + this.getReportLevel() + ", ");
		sb.append("rewardLevel: " + this.getRewardLevel());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final ProductPlan that; 
		try {
			that = (ProductPlan) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreatedAt() == null) && (that.getCreatedAt() == null)) || (getCreatedAt() != null && getCreatedAt().equals(that.getCreatedAt())));
		result = result && (((getDeletedAt() == null) && (that.getDeletedAt() == null)) || (getDeletedAt() != null && getDeletedAt().equals(that.getDeletedAt())));
		result = result && (((getMaxChildren() == null) && (that.getMaxChildren() == null)) || (getMaxChildren() != null && getMaxChildren().equals(that.getMaxChildren())));
		result = result && (((getMaxChoreAlertsPerWk() == null) && (that.getMaxChoreAlertsPerWk() == null)) || (getMaxChoreAlertsPerWk() != null && getMaxChoreAlertsPerWk().equals(that.getMaxChoreAlertsPerWk())));
		result = result && (((getPlanDays() == null) && (that.getPlanDays() == null)) || (getPlanDays() != null && getPlanDays().equals(that.getPlanDays())));
		result = result && (((getReportLevel() == null) && (that.getReportLevel() == null)) || (getReportLevel() != null && getReportLevel().equals(that.getReportLevel())));
		result = result && (((getRewardLevel() == null) && (that.getRewardLevel() == null)) || (getRewardLevel() != null && getRewardLevel().equals(that.getRewardLevel())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	
	

	
}
