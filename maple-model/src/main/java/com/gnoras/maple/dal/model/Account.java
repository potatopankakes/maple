package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.AccountProductPlan;
import com.gnoras.maple.dal.model.AccountProductPlanAdjustment;
import com.gnoras.maple.dal.model.Family;
import com.gnoras.maple.dal.model.Purchase;
import com.gnoras.maple.dal.model.interfaces.IAccount;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: account.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "id")
@Table(name = "account", catalog = "maple")
public class Account extends Quota implements Cloneable, Serializable, IPojoGenEntity, IAccount {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024050L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Set<AccountProductPlan> accountProductPlans = new HashSet<AccountProductPlan>();

	/** Field mapping. */
	private Set<AccountProductPlanAdjustment> accountProductPlanAdjustments = new HashSet<AccountProductPlanAdjustment>();

	/** Field mapping. */
	private Long createdAt;
	/** Field mapping. */
	private Long deletedAt;
	/** Field mapping. */
	private Set<Family> families = new HashSet<Family>();

	/** Field mapping. */
	private Set<Purchase> purchases = new HashSet<Purchase>();

	/** Field mapping. */
	private String quotaId;
	/** Field mapping. */
	private AccountState state;
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return Account.class;
	}
 

    /**
     * Return the value associated with the column: accountProductPlan.
	 * @return A Set&lt;AccountProductPlan&gt; object (this.accountProductPlan)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "account"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<AccountProductPlan> getAccountProductPlans() {
		return this.accountProductPlans;
		
	}
	
	/**
	 * Adds a bi-directional link of type AccountProductPlan to the accountProductPlans set.
	 * @param accountProductPlan item to add
	 */
	public void addAccountProductPlan(AccountProductPlan accountProductPlan) {
		accountProductPlan.setAccount(this);
		this.accountProductPlans.add(accountProductPlan);
	}

  
    /**  
     * Set the value related to the column: accountProductPlan.
	 * @param accountProductPlan the accountProductPlan value you wish to set
	 */
	public void setAccountProductPlans(final Set<AccountProductPlan> accountProductPlan) {
		this.accountProductPlans = accountProductPlan;
	}

    /**
     * Return the value associated with the column: accountProductPlanAdjustment.
	 * @return A Set&lt;AccountProductPlanAdjustment&gt; object (this.accountProductPlanAdjustment)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "account"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<AccountProductPlanAdjustment> getAccountProductPlanAdjustments() {
		return this.accountProductPlanAdjustments;
		
	}
	
	/**
	 * Adds a bi-directional link of type AccountProductPlanAdjustment to the accountProductPlanAdjustments set.
	 * @param accountProductPlanAdjustment item to add
	 */
	public void addAccountProductPlanAdjustment(AccountProductPlanAdjustment accountProductPlanAdjustment) {
		accountProductPlanAdjustment.setAccount(this);
		this.accountProductPlanAdjustments.add(accountProductPlanAdjustment);
	}

  
    /**  
     * Set the value related to the column: accountProductPlanAdjustment.
	 * @param accountProductPlanAdjustment the accountProductPlanAdjustment value you wish to set
	 */
	public void setAccountProductPlanAdjustments(final Set<AccountProductPlanAdjustment> accountProductPlanAdjustment) {
		this.accountProductPlanAdjustments = accountProductPlanAdjustment;
	}

    /**
     * Return the value associated with the column: createdAt.
	 * @return A Long object (this.createdAt)
	 */
	@Mandatory
	@Column( name = "created_at"  )
	public Long getCreatedAt() {
		return this.createdAt;
		
	}
	

  
    /**  
     * Set the value related to the column: createdAt.
	 * @param createdAt the createdAt value you wish to set
	 */
	public void setCreatedAt(final Long createdAt) {
		this.createdAt = createdAt;
	}

    /**
     * Return the value associated with the column: deletedAt.
	 * @return A Long object (this.deletedAt)
	 */
	@Mandatory
	@Column( name = "deleted_at"  )
	public Long getDeletedAt() {
		return this.deletedAt;
		
	}
	

  
    /**  
     * Set the value related to the column: deletedAt.
	 * @param deletedAt the deletedAt value you wish to set
	 */
	public void setDeletedAt(final Long deletedAt) {
		this.deletedAt = deletedAt;
	}

    /**
     * Return the value associated with the column: family.
	 * @return A Set&lt;Family&gt; object (this.family)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "account"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<Family> getFamilies() {
		return this.families;
		
	}
	
	/**
	 * Adds a bi-directional link of type Family to the families set.
	 * @param family item to add
	 */
	public void addFamily(Family family) {
		family.setAccount(this);
		this.families.add(family);
	}

  
    /**  
     * Set the value related to the column: family.
	 * @param family the family value you wish to set
	 */
	public void setFamilies(final Set<Family> family) {
		this.families = family;
	}

    /**
     * Return the value associated with the column: purchase.
	 * @return A Set&lt;Purchase&gt; object (this.purchase)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "account"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	public Set<Purchase> getPurchases() {
		return this.purchases;
		
	}
	
	/**
	 * Adds a bi-directional link of type Purchase to the purchases set.
	 * @param purchase item to add
	 */
	public void addPurchase(Purchase purchase) {
		purchase.setAccount(this);
		this.purchases.add(purchase);
	}

  
    /**  
     * Set the value related to the column: purchase.
	 * @param purchase the purchase value you wish to set
	 */
	public void setPurchases(final Set<Purchase> purchase) {
		this.purchases = purchase;
	}

    /**
     * Return the value associated with the column: quotaId.
	 * @return A String object (this.quotaId)
	 */
	@Mandatory
	@Length(max=36)
	@Column( name = "quota_id", length = 36  )
	public String getQuotaId() {
		return this.quotaId;
		
	}
	

  
    /**  
     * Set the value related to the column: quotaId.
	 * @param quotaId the quotaId value you wish to set
	 */
	public void setQuotaId(final String quotaId) {
		this.quotaId = quotaId;
	}

    /**
     * Return the value associated with the column: state.
	 * @return A AccountState object (this.state)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "state_id" )
	@Valid
	public AccountState getState() {
		return this.state;
		
	}
	

  
    /**  
     * Set the value related to the column: state.
	 * @param state the state value you wish to set
	 */
	public void setState(final AccountState state) {
		this.state = state;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Account clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Account copy = new Account();

		if (this.getAccountProductPlans() != null) {
			copy.getAccountProductPlans().addAll(this.getAccountProductPlans());
		}
		if (this.getAccountProductPlanAdjustments() != null) {
			copy.getAccountProductPlanAdjustments().addAll(this.getAccountProductPlanAdjustments());
		}
		copy.setChoreAlertsUsedThisWk(this.getChoreAlertsUsedThisWk());
		copy.setCreatedAt(this.getCreatedAt());
		copy.setDeletedAt(this.getDeletedAt());
		if (this.getFamilies() != null) {
			copy.getFamilies().addAll(this.getFamilies());
		}
		copy.setId(this.getId());
		copy.setMaxChildren(this.getMaxChildren());
		copy.setMaxChoreAlertsThisWeek(this.getMaxChoreAlertsThisWeek());
		if (this.getPurchases() != null) {
			copy.getPurchases().addAll(this.getPurchases());
		}
		copy.setQuotaId(this.getQuotaId());
		copy.setReportLevel(this.getReportLevel());
		copy.setRewardLevel(this.getRewardLevel());
		copy.setState(this.getState());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createdAt: " + this.getCreatedAt() + ", ");
		sb.append("deletedAt: " + this.getDeletedAt() + ", ");
		sb.append("quotaId: " + this.getQuotaId() + ", ");
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Account that; 
		try {
			that = (Account) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreatedAt() == null) && (that.getCreatedAt() == null)) || (getCreatedAt() != null && getCreatedAt().equals(that.getCreatedAt())));
		result = result && (((getDeletedAt() == null) && (that.getDeletedAt() == null)) || (getDeletedAt() != null && getDeletedAt().equals(that.getDeletedAt())));
		result = result && (((getQuotaId() == null) && (that.getQuotaId() == null)) || (getQuotaId() != null && getQuotaId().equals(that.getQuotaId())));
		result = result && (((getState() == null) && (that.getState() == null)) || (getState() != null && getState().equals(that.getState())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	
	

	
}
