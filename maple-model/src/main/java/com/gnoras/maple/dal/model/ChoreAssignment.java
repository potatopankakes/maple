package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.interfaces.IChoreAssignment;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: chore_assignment.
 * @author autogenerated
 */

@Entity
@Table(name = "chore_assignment", catalog = "maple")
public class ChoreAssignment implements Cloneable, Serializable, IPojoGenEntity, IChoreAssignment {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024044L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Child child;
	/** Field mapping. */
	private Chore chore;
	/** Field mapping. */
	private Long completedAt;
	/** Field mapping. */
	private Long dueAt;
	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private Parent parent;
	/** Field mapping. */
	private Double rewardGranted;
	/** Field mapping. */
	private String rewardId;
	/** Field mapping. */
	private RewardPolicy rewardPolicy;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public ChoreAssignment() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public ChoreAssignment(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param child Child object;
	 * @param chore Chore object;
	 * @param completedAt Long object;
	 * @param dueAt Long object;
	 * @param id String object;
	 * @param parent Parent object;
	 * @param rewardGranted Double object;
	 * @param rewardId String object;
	 * @param rewardPolicy RewardPolicy object;
	 */
	public ChoreAssignment(Child child, Chore chore, Long completedAt, 					
			Long dueAt, String id, Parent parent, 					
			Double rewardGranted, String rewardId, RewardPolicy rewardPolicy) {

		this.child = child;
		this.chore = chore;
		this.completedAt = completedAt;
		this.dueAt = dueAt;
		this.id = id;
		this.parent = parent;
		this.rewardGranted = rewardGranted;
		this.rewardId = rewardId;
		this.rewardPolicy = rewardPolicy;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return ChoreAssignment.class;
	}
 

    /**
     * Return the value associated with the column: child.
	 * @return A Child object (this.child)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "child_id" )
	@Valid
	public Child getChild() {
		return this.child;
		
	}
	

  
    /**  
     * Set the value related to the column: child.
	 * @param child the child value you wish to set
	 */
	public void setChild(final Child child) {
		this.child = child;
	}

    /**
     * Return the value associated with the column: chore.
	 * @return A Chore object (this.chore)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "chore_id" )
	@Valid
	public Chore getChore() {
		return this.chore;
		
	}
	

  
    /**  
     * Set the value related to the column: chore.
	 * @param chore the chore value you wish to set
	 */
	public void setChore(final Chore chore) {
		this.chore = chore;
	}

    /**
     * Return the value associated with the column: completedAt.
	 * @return A Long object (this.completedAt)
	 */
	@Mandatory
	@Column( name = "completed_at"  )
	public Long getCompletedAt() {
		return this.completedAt;
		
	}
	

  
    /**  
     * Set the value related to the column: completedAt.
	 * @param completedAt the completedAt value you wish to set
	 */
	public void setCompletedAt(final Long completedAt) {
		this.completedAt = completedAt;
	}

    /**
     * Return the value associated with the column: dueAt.
	 * @return A Long object (this.dueAt)
	 */
	@Mandatory
	@Column( name = "due_at"  )
	public Long getDueAt() {
		return this.dueAt;
		
	}
	

  
    /**  
     * Set the value related to the column: dueAt.
	 * @param dueAt the dueAt value you wish to set
	 */
	public void setDueAt(final Long dueAt) {
		this.dueAt = dueAt;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Mandatory
	@Length(max=36)
	@Column( name = "id", length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: parent.
	 * @return A Parent object (this.parent)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "parent_id" )
	@Valid
	public Parent getParent() {
		return this.parent;
		
	}
	

  
    /**  
     * Set the value related to the column: parent.
	 * @param parent the parent value you wish to set
	 */
	public void setParent(final Parent parent) {
		this.parent = parent;
	}

    /**
     * Return the value associated with the column: rewardGranted.
	 * @return A Double object (this.rewardGranted)
	 */
	@Mandatory
	@Column( name = "reward_granted"  )
	public Double getRewardGranted() {
		return this.rewardGranted;
		
	}
	

  
    /**  
     * Set the value related to the column: rewardGranted.
	 * @param rewardGranted the rewardGranted value you wish to set
	 */
	public void setRewardGranted(final Double rewardGranted) {
		this.rewardGranted = rewardGranted;
	}

    /**
     * Return the value associated with the column: rewardId.
	 * @return A String object (this.rewardId)
	 */
	@Mandatory
	@Length(max=36)
	@Column( name = "reward_id", length = 36  )
	public String getRewardId() {
		return this.rewardId;
		
	}
	

  
    /**  
     * Set the value related to the column: rewardId.
	 * @param rewardId the rewardId value you wish to set
	 */
	public void setRewardId(final String rewardId) {
		this.rewardId = rewardId;
	}

    /**
     * Return the value associated with the column: rewardPolicy.
	 * @return A RewardPolicy object (this.rewardPolicy)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "reward_policy_id" )
	@Valid
	public RewardPolicy getRewardPolicy() {
		return this.rewardPolicy;
		
	}
	

  
    /**  
     * Set the value related to the column: rewardPolicy.
	 * @param rewardPolicy the rewardPolicy value you wish to set
	 */
	public void setRewardPolicy(final RewardPolicy rewardPolicy) {
		this.rewardPolicy = rewardPolicy;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public ChoreAssignment clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final ChoreAssignment copy = new ChoreAssignment();

		copy.setChild(this.getChild());
		copy.setChore(this.getChore());
		copy.setCompletedAt(this.getCompletedAt());
		copy.setDueAt(this.getDueAt());
		copy.setId(this.getId());
		copy.setParent(this.getParent());
		copy.setRewardGranted(this.getRewardGranted());
		copy.setRewardId(this.getRewardId());
		copy.setRewardPolicy(this.getRewardPolicy());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("completedAt: " + this.getCompletedAt() + ", ");
		sb.append("dueAt: " + this.getDueAt() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("rewardGranted: " + this.getRewardGranted() + ", ");
		sb.append("rewardId: " + this.getRewardId() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final ChoreAssignment that; 
		try {
			that = (ChoreAssignment) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getChild() == null) && (that.getChild() == null)) || (getChild() != null && getChild().equals(that.getChild())));
		result = result && (((getChore() == null) && (that.getChore() == null)) || (getChore() != null && getChore().equals(that.getChore())));
		result = result && (((getCompletedAt() == null) && (that.getCompletedAt() == null)) || (getCompletedAt() != null && getCompletedAt().equals(that.getCompletedAt())));
		result = result && (((getDueAt() == null) && (that.getDueAt() == null)) || (getDueAt() != null && getDueAt().equals(that.getDueAt())));
		result = result && (((getParent() == null) && (that.getParent() == null)) || (getParent() != null && getParent().equals(that.getParent())));
		result = result && (((getRewardGranted() == null) && (that.getRewardGranted() == null)) || (getRewardGranted() != null && getRewardGranted().equals(that.getRewardGranted())));
		result = result && (((getRewardId() == null) && (that.getRewardId() == null)) || (getRewardId() != null && getRewardId().equals(that.getRewardId())));
		result = result && (((getRewardPolicy() == null) && (that.getRewardPolicy() == null)) || (getRewardPolicy() != null && getRewardPolicy().equals(that.getRewardPolicy())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	
	

	
}
