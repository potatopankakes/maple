package com.gnoras.maple.dal.services;

import com.gnoras.maple.dal.factories.*;
import com.gnoras.maple.dal.model.Account;
import com.gnoras.maple.dal.model.AccountProductPlan;
import com.gnoras.maple.dal.model.AccountProductPlanAdjustment;
import com.gnoras.maple.dal.model.AccountState;
import com.gnoras.maple.dal.model.Child;
import com.gnoras.maple.dal.model.Chore;
import com.gnoras.maple.dal.model.ChoreAssignment;
import com.gnoras.maple.dal.model.Country;
import com.gnoras.maple.dal.model.CountryCurrency;
import com.gnoras.maple.dal.model.CountryName;
import com.gnoras.maple.dal.model.Currency;
import com.gnoras.maple.dal.model.CurrencyName;
import com.gnoras.maple.dal.model.EmailAddress;
import com.gnoras.maple.dal.model.Family;
import com.gnoras.maple.dal.model.FamilyChild;
import com.gnoras.maple.dal.model.FamilyParent;
import com.gnoras.maple.dal.model.Group;
import com.gnoras.maple.dal.model.GroupMember;
import com.gnoras.maple.dal.model.Language;
import com.gnoras.maple.dal.model.LanguageName;
import com.gnoras.maple.dal.model.Offering;
import com.gnoras.maple.dal.model.Parent;
import com.gnoras.maple.dal.model.PaymentFromCc;
import com.gnoras.maple.dal.model.PaymentFromPaypal;
import com.gnoras.maple.dal.model.PaymentType;
import com.gnoras.maple.dal.model.PlanText;
import com.gnoras.maple.dal.model.Privilege;
import com.gnoras.maple.dal.model.PrivilegedGroup;
import com.gnoras.maple.dal.model.ProductPlan;
import com.gnoras.maple.dal.model.Purchase;
import com.gnoras.maple.dal.model.Quota;
import com.gnoras.maple.dal.model.RecurringChoreAssignment;
import com.gnoras.maple.dal.model.Refund;
import com.gnoras.maple.dal.model.Reward;
import com.gnoras.maple.dal.model.RewardEarlyFunction;
import com.gnoras.maple.dal.model.RewardLateFunction;
import com.gnoras.maple.dal.model.RewardPolicy;
import com.gnoras.maple.dal.model.RewardType;
import com.gnoras.maple.dal.model.Transaction;
import com.gnoras.maple.dal.model.TransactionItem;
import com.gnoras.maple.dal.model.User;
import java.io.Serializable;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import java.util.Collection;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import com.felees.hbnpojogen.persistence.GenericDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.hibernate.LockMode;
import org.hibernate.SessionFactory;
import org.hibernate.proxy.HibernateProxy;
/** 
 * Data layer.
 * @author autogenerated
 */
@org.springframework.stereotype.Component
public class DataLayerMapleImpl implements DataLayerMaple {
	/** Singleton reference to this class. */
	private static DataLayerMaple instance;
	/** map lock. */
	private static Object daoMapLock = new Object();

	/** Internal handle. */
	private static Map<Class<?>, GenericDAO<?, ?>> daoMap = null; 
	
		/** Inner handle. */
	private static ApplicationContext context;
 /** Sessionfactory in use. Filled in by Spring. */ 
    private SessionFactory sessionFactory = null;
	
	/** Handle to get back ourselves and perform correct injection. 
	 * @param ctxt filled by spring
	 */
	@Autowired
	public void setApplicationContext(ApplicationContext ctxt) {
		DataLayerMapleImpl.context = ctxt;
	}
	
	
		
 	/**
     * Set session factory.
     * @param sessionFactory sessionfactory to use. 
     */
    @Autowired
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
    /** 
	* Returns a DAO instance of the given type.
	* @param <T> Type
	* @param persistentObject to get
	* @return GenericDAO<T, ?> object
     */
    @SuppressWarnings("unchecked")
    private <T> GenericDAO<T, ?> getDAO(final T persistentObject) {
		T persistent = persistentObject;

		synchronized (daoMapLock) {
    		if (daoMap == null) {
    			daoMap = new ConcurrentHashMap<Class<?>, GenericDAO<?, ?>>(); 
	 	   		daoMap.put(Account.class, HibernateMapleDaoFactory.getAccountDao());
	 	   		daoMap.put(AccountProductPlan.class, HibernateMapleDaoFactory.getAccountProductPlanDao());
	 	   		daoMap.put(AccountProductPlanAdjustment.class, HibernateMapleDaoFactory.getAccountProductPlanAdjustmentDao());
	 	   		daoMap.put(AccountState.class, HibernateMapleDaoFactory.getAccountStateDao());
	 	   		daoMap.put(Child.class, HibernateMapleDaoFactory.getChildDao());
	 	   		daoMap.put(Chore.class, HibernateMapleDaoFactory.getChoreDao());
	 	   		daoMap.put(ChoreAssignment.class, HibernateMapleDaoFactory.getChoreAssignmentDao());
	 	   		daoMap.put(Country.class, HibernateMapleDaoFactory.getCountryDao());
	 	   		daoMap.put(CountryCurrency.class, HibernateMapleDaoFactory.getCountryCurrencyDao());
	 	   		daoMap.put(CountryName.class, HibernateMapleDaoFactory.getCountryNameDao());
	 	   		daoMap.put(Currency.class, HibernateMapleDaoFactory.getCurrencyDao());
	 	   		daoMap.put(CurrencyName.class, HibernateMapleDaoFactory.getCurrencyNameDao());
	 	   		daoMap.put(EmailAddress.class, HibernateMapleDaoFactory.getEmailAddressDao());
	 	   		daoMap.put(Family.class, HibernateMapleDaoFactory.getFamilyDao());
	 	   		daoMap.put(FamilyChild.class, HibernateMapleDaoFactory.getFamilyChildDao());
	 	   		daoMap.put(FamilyParent.class, HibernateMapleDaoFactory.getFamilyParentDao());
	 	   		daoMap.put(Group.class, HibernateMapleDaoFactory.getGroupDao());
	 	   		daoMap.put(GroupMember.class, HibernateMapleDaoFactory.getGroupMemberDao());
	 	   		daoMap.put(Language.class, HibernateMapleDaoFactory.getLanguageDao());
	 	   		daoMap.put(LanguageName.class, HibernateMapleDaoFactory.getLanguageNameDao());
	 	   		daoMap.put(Offering.class, HibernateMapleDaoFactory.getOfferingDao());
	 	   		daoMap.put(Parent.class, HibernateMapleDaoFactory.getParentDao());
	 	   		daoMap.put(PaymentFromCc.class, HibernateMapleDaoFactory.getPaymentFromCcDao());
	 	   		daoMap.put(PaymentFromPaypal.class, HibernateMapleDaoFactory.getPaymentFromPaypalDao());
	 	   		daoMap.put(PaymentType.class, HibernateMapleDaoFactory.getPaymentTypeDao());
	 	   		daoMap.put(PlanText.class, HibernateMapleDaoFactory.getPlanTextDao());
	 	   		daoMap.put(Privilege.class, HibernateMapleDaoFactory.getPrivilegeDao());
	 	   		daoMap.put(PrivilegedGroup.class, HibernateMapleDaoFactory.getPrivilegedGroupDao());
	 	   		daoMap.put(ProductPlan.class, HibernateMapleDaoFactory.getProductPlanDao());
	 	   		daoMap.put(Purchase.class, HibernateMapleDaoFactory.getPurchaseDao());
	 	   		daoMap.put(Quota.class, HibernateMapleDaoFactory.getQuotaDao());
	 	   		daoMap.put(RecurringChoreAssignment.class, HibernateMapleDaoFactory.getRecurringChoreAssignmentDao());
	 	   		daoMap.put(Refund.class, HibernateMapleDaoFactory.getRefundDao());
	 	   		daoMap.put(Reward.class, HibernateMapleDaoFactory.getRewardDao());
	 	   		daoMap.put(RewardEarlyFunction.class, HibernateMapleDaoFactory.getRewardEarlyFunctionDao());
	 	   		daoMap.put(RewardLateFunction.class, HibernateMapleDaoFactory.getRewardLateFunctionDao());
	 	   		daoMap.put(RewardPolicy.class, HibernateMapleDaoFactory.getRewardPolicyDao());
	 	   		daoMap.put(RewardType.class, HibernateMapleDaoFactory.getRewardTypeDao());
	 	   		daoMap.put(Transaction.class, HibernateMapleDaoFactory.getTransactionDao());
	 	   		daoMap.put(TransactionItem.class, HibernateMapleDaoFactory.getTransactionItemDao());
	 	   		daoMap.put(User.class, HibernateMapleDaoFactory.getUserDao());
    		}
		 }
		if (persistentObject instanceof HibernateProxy) {
			persistent = (T) ((HibernateProxy) persistentObject).getHibernateLazyInitializer().getImplementation();
		} 
		
		GenericDAO<T, ?> result = (GenericDAO<T, ?>) daoMap.get(persistent.getClass());
		if (result == null) {
			throw new IllegalAccessError("The given object is of an incorrect type. ");
		}
		return result;
    }

    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    public <T> void delete(T persistentObject) {
    	    	getDAO(persistentObject).delete(persistentObject);
    }
    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    public <T> void refresh(T persistentObject) {
	    	getDAO(persistentObject).refresh(persistentObject);
    }

    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    public <T> Serializable save(T persistentObject) {
        return getDAO(persistentObject).save(persistentObject);
    }
    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    public <T> void saveOrUpdate(T persistentObject) {
        getDAO(persistentObject).saveOrUpdate(persistentObject);
    }
    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    public <T> void update(T persistentObject) {
        getDAO(persistentObject).update(persistentObject);
    }


    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Account obj) directly
     * @param id Identifier to delete
     */
    public void deleteAccount(final Serializable id)  {
        HibernateMapleDaoFactory.getAccountDao().delete(loadAccount(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Account object
     */
    public Account loadAccount(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Account getAccount(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (AccountProductPlan obj) directly
     * @param id Identifier to delete
     */
    public void deleteAccountProductPlan(final Serializable id)  {
        HibernateMapleDaoFactory.getAccountProductPlanDao().delete(loadAccountProductPlan(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a AccountProductPlan object
     */
    public AccountProductPlan loadAccountProductPlan(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountProductPlanDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public AccountProductPlan getAccountProductPlan(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountProductPlanDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (AccountProductPlanAdjustment obj) directly
     * @param id Identifier to delete
     */
    public void deleteAccountProductPlanAdjustment(final Serializable id)  {
        HibernateMapleDaoFactory.getAccountProductPlanAdjustmentDao().delete(loadAccountProductPlanAdjustment(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a AccountProductPlanAdjustment object
     */
    public AccountProductPlanAdjustment loadAccountProductPlanAdjustment(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountProductPlanAdjustmentDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public AccountProductPlanAdjustment getAccountProductPlanAdjustment(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountProductPlanAdjustmentDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (AccountState obj) directly
     * @param id Identifier to delete
     */
    public void deleteAccountState(final Serializable id)  {
        HibernateMapleDaoFactory.getAccountStateDao().delete(loadAccountState(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a AccountState object
     */
    public AccountState loadAccountState(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountStateDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public AccountState getAccountState(final Serializable id) {
        return HibernateMapleDaoFactory.getAccountStateDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Child obj) directly
     * @param id Identifier to delete
     */
    public void deleteChild(final Serializable id)  {
        HibernateMapleDaoFactory.getChildDao().delete(loadChild(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Child object
     */
    public Child loadChild(final Serializable id) {
        return HibernateMapleDaoFactory.getChildDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Child getChild(final Serializable id) {
        return HibernateMapleDaoFactory.getChildDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Chore obj) directly
     * @param id Identifier to delete
     */
    public void deleteChore(final Serializable id)  {
        HibernateMapleDaoFactory.getChoreDao().delete(loadChore(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Chore object
     */
    public Chore loadChore(final Serializable id) {
        return HibernateMapleDaoFactory.getChoreDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Chore getChore(final Serializable id) {
        return HibernateMapleDaoFactory.getChoreDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ChoreAssignment obj) directly
     * @param id Identifier to delete
     */
    public void deleteChoreAssignment(final Serializable id)  {
        HibernateMapleDaoFactory.getChoreAssignmentDao().delete(loadChoreAssignment(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ChoreAssignment object
     */
    public ChoreAssignment loadChoreAssignment(final Serializable id) {
        return HibernateMapleDaoFactory.getChoreAssignmentDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ChoreAssignment getChoreAssignment(final Serializable id) {
        return HibernateMapleDaoFactory.getChoreAssignmentDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Country obj) directly
     * @param id Identifier to delete
     */
    public void deleteCountry(final Serializable id)  {
        HibernateMapleDaoFactory.getCountryDao().delete(loadCountry(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Country object
     */
    public Country loadCountry(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Country getCountry(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (CountryCurrency obj) directly
     * @param id Identifier to delete
     */
    public void deleteCountryCurrency(final Serializable id)  {
        HibernateMapleDaoFactory.getCountryCurrencyDao().delete(loadCountryCurrency(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a CountryCurrency object
     */
    public CountryCurrency loadCountryCurrency(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryCurrencyDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public CountryCurrency getCountryCurrency(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryCurrencyDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (CountryName obj) directly
     * @param id Identifier to delete
     */
    public void deleteCountryName(final Serializable id)  {
        HibernateMapleDaoFactory.getCountryNameDao().delete(loadCountryName(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a CountryName object
     */
    public CountryName loadCountryName(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryNameDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public CountryName getCountryName(final Serializable id) {
        return HibernateMapleDaoFactory.getCountryNameDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Currency obj) directly
     * @param id Identifier to delete
     */
    public void deleteCurrency(final Serializable id)  {
        HibernateMapleDaoFactory.getCurrencyDao().delete(loadCurrency(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Currency object
     */
    public Currency loadCurrency(final Serializable id) {
        return HibernateMapleDaoFactory.getCurrencyDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Currency getCurrency(final Serializable id) {
        return HibernateMapleDaoFactory.getCurrencyDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (CurrencyName obj) directly
     * @param id Identifier to delete
     */
    public void deleteCurrencyName(final Serializable id)  {
        HibernateMapleDaoFactory.getCurrencyNameDao().delete(loadCurrencyName(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a CurrencyName object
     */
    public CurrencyName loadCurrencyName(final Serializable id) {
        return HibernateMapleDaoFactory.getCurrencyNameDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public CurrencyName getCurrencyName(final Serializable id) {
        return HibernateMapleDaoFactory.getCurrencyNameDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (EmailAddress obj) directly
     * @param id Identifier to delete
     */
    public void deleteEmailAddress(final Serializable id)  {
        HibernateMapleDaoFactory.getEmailAddressDao().delete(loadEmailAddress(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a EmailAddress object
     */
    public EmailAddress loadEmailAddress(final Serializable id) {
        return HibernateMapleDaoFactory.getEmailAddressDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public EmailAddress getEmailAddress(final Serializable id) {
        return HibernateMapleDaoFactory.getEmailAddressDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Family obj) directly
     * @param id Identifier to delete
     */
    public void deleteFamily(final Serializable id)  {
        HibernateMapleDaoFactory.getFamilyDao().delete(loadFamily(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Family object
     */
    public Family loadFamily(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Family getFamily(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (FamilyChild obj) directly
     * @param id Identifier to delete
     */
    public void deleteFamilyChild(final Serializable id)  {
        HibernateMapleDaoFactory.getFamilyChildDao().delete(loadFamilyChild(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a FamilyChild object
     */
    public FamilyChild loadFamilyChild(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyChildDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public FamilyChild getFamilyChild(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyChildDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (FamilyParent obj) directly
     * @param id Identifier to delete
     */
    public void deleteFamilyParent(final Serializable id)  {
        HibernateMapleDaoFactory.getFamilyParentDao().delete(loadFamilyParent(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a FamilyParent object
     */
    public FamilyParent loadFamilyParent(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyParentDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public FamilyParent getFamilyParent(final Serializable id) {
        return HibernateMapleDaoFactory.getFamilyParentDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Group obj) directly
     * @param id Identifier to delete
     */
    public void deleteGroup(final Serializable id)  {
        HibernateMapleDaoFactory.getGroupDao().delete(loadGroup(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Group object
     */
    public Group loadGroup(final Serializable id) {
        return HibernateMapleDaoFactory.getGroupDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Group getGroup(final Serializable id) {
        return HibernateMapleDaoFactory.getGroupDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (GroupMember obj) directly
     * @param id Identifier to delete
     */
    public void deleteGroupMember(final Serializable id)  {
        HibernateMapleDaoFactory.getGroupMemberDao().delete(loadGroupMember(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a GroupMember object
     */
    public GroupMember loadGroupMember(final Serializable id) {
        return HibernateMapleDaoFactory.getGroupMemberDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public GroupMember getGroupMember(final Serializable id) {
        return HibernateMapleDaoFactory.getGroupMemberDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Language obj) directly
     * @param id Identifier to delete
     */
    public void deleteLanguage(final Serializable id)  {
        HibernateMapleDaoFactory.getLanguageDao().delete(loadLanguage(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Language object
     */
    public Language loadLanguage(final Serializable id) {
        return HibernateMapleDaoFactory.getLanguageDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Language getLanguage(final Serializable id) {
        return HibernateMapleDaoFactory.getLanguageDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (LanguageName obj) directly
     * @param id Identifier to delete
     */
    public void deleteLanguageName(final Serializable id)  {
        HibernateMapleDaoFactory.getLanguageNameDao().delete(loadLanguageName(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a LanguageName object
     */
    public LanguageName loadLanguageName(final Serializable id) {
        return HibernateMapleDaoFactory.getLanguageNameDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public LanguageName getLanguageName(final Serializable id) {
        return HibernateMapleDaoFactory.getLanguageNameDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Offering obj) directly
     * @param id Identifier to delete
     */
    public void deleteOffering(final Serializable id)  {
        HibernateMapleDaoFactory.getOfferingDao().delete(loadOffering(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Offering object
     */
    public Offering loadOffering(final Serializable id) {
        return HibernateMapleDaoFactory.getOfferingDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Offering getOffering(final Serializable id) {
        return HibernateMapleDaoFactory.getOfferingDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Parent obj) directly
     * @param id Identifier to delete
     */
    public void deleteParent(final Serializable id)  {
        HibernateMapleDaoFactory.getParentDao().delete(loadParent(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Parent object
     */
    public Parent loadParent(final Serializable id) {
        return HibernateMapleDaoFactory.getParentDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Parent getParent(final Serializable id) {
        return HibernateMapleDaoFactory.getParentDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (PaymentFromCc obj) directly
     * @param id Identifier to delete
     */
    public void deletePaymentFromCc(final Serializable id)  {
        HibernateMapleDaoFactory.getPaymentFromCcDao().delete(loadPaymentFromCc(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a PaymentFromCc object
     */
    public PaymentFromCc loadPaymentFromCc(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentFromCcDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public PaymentFromCc getPaymentFromCc(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentFromCcDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (PaymentFromPaypal obj) directly
     * @param id Identifier to delete
     */
    public void deletePaymentFromPaypal(final Serializable id)  {
        HibernateMapleDaoFactory.getPaymentFromPaypalDao().delete(loadPaymentFromPaypal(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a PaymentFromPaypal object
     */
    public PaymentFromPaypal loadPaymentFromPaypal(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentFromPaypalDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public PaymentFromPaypal getPaymentFromPaypal(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentFromPaypalDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (PaymentType obj) directly
     * @param id Identifier to delete
     */
    public void deletePaymentType(final Serializable id)  {
        HibernateMapleDaoFactory.getPaymentTypeDao().delete(loadPaymentType(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a PaymentType object
     */
    public PaymentType loadPaymentType(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentTypeDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public PaymentType getPaymentType(final Serializable id) {
        return HibernateMapleDaoFactory.getPaymentTypeDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (PlanText obj) directly
     * @param id Identifier to delete
     */
    public void deletePlanText(final Serializable id)  {
        HibernateMapleDaoFactory.getPlanTextDao().delete(loadPlanText(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a PlanText object
     */
    public PlanText loadPlanText(final Serializable id) {
        return HibernateMapleDaoFactory.getPlanTextDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public PlanText getPlanText(final Serializable id) {
        return HibernateMapleDaoFactory.getPlanTextDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Privilege obj) directly
     * @param id Identifier to delete
     */
    public void deletePrivilege(final Serializable id)  {
        HibernateMapleDaoFactory.getPrivilegeDao().delete(loadPrivilege(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Privilege object
     */
    public Privilege loadPrivilege(final Serializable id) {
        return HibernateMapleDaoFactory.getPrivilegeDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Privilege getPrivilege(final Serializable id) {
        return HibernateMapleDaoFactory.getPrivilegeDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (PrivilegedGroup obj) directly
     * @param id Identifier to delete
     */
    public void deletePrivilegedGroup(final Serializable id)  {
        HibernateMapleDaoFactory.getPrivilegedGroupDao().delete(loadPrivilegedGroup(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a PrivilegedGroup object
     */
    public PrivilegedGroup loadPrivilegedGroup(final Serializable id) {
        return HibernateMapleDaoFactory.getPrivilegedGroupDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public PrivilegedGroup getPrivilegedGroup(final Serializable id) {
        return HibernateMapleDaoFactory.getPrivilegedGroupDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProductPlan obj) directly
     * @param id Identifier to delete
     */
    public void deleteProductPlan(final Serializable id)  {
        HibernateMapleDaoFactory.getProductPlanDao().delete(loadProductPlan(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProductPlan object
     */
    public ProductPlan loadProductPlan(final Serializable id) {
        return HibernateMapleDaoFactory.getProductPlanDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public ProductPlan getProductPlan(final Serializable id) {
        return HibernateMapleDaoFactory.getProductPlanDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Purchase obj) directly
     * @param id Identifier to delete
     */
    public void deletePurchase(final Serializable id)  {
        HibernateMapleDaoFactory.getPurchaseDao().delete(loadPurchase(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Purchase object
     */
    public Purchase loadPurchase(final Serializable id) {
        return HibernateMapleDaoFactory.getPurchaseDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Purchase getPurchase(final Serializable id) {
        return HibernateMapleDaoFactory.getPurchaseDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Quota obj) directly
     * @param id Identifier to delete
     */
    public void deleteQuota(final Serializable id)  {
        HibernateMapleDaoFactory.getQuotaDao().delete(loadQuota(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Quota object
     */
    public Quota loadQuota(final Serializable id) {
        return HibernateMapleDaoFactory.getQuotaDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Quota getQuota(final Serializable id) {
        return HibernateMapleDaoFactory.getQuotaDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RecurringChoreAssignment obj) directly
     * @param id Identifier to delete
     */
    public void deleteRecurringChoreAssignment(final Serializable id)  {
        HibernateMapleDaoFactory.getRecurringChoreAssignmentDao().delete(loadRecurringChoreAssignment(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RecurringChoreAssignment object
     */
    public RecurringChoreAssignment loadRecurringChoreAssignment(final Serializable id) {
        return HibernateMapleDaoFactory.getRecurringChoreAssignmentDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public RecurringChoreAssignment getRecurringChoreAssignment(final Serializable id) {
        return HibernateMapleDaoFactory.getRecurringChoreAssignmentDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Refund obj) directly
     * @param id Identifier to delete
     */
    public void deleteRefund(final Serializable id)  {
        HibernateMapleDaoFactory.getRefundDao().delete(loadRefund(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Refund object
     */
    public Refund loadRefund(final Serializable id) {
        return HibernateMapleDaoFactory.getRefundDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Refund getRefund(final Serializable id) {
        return HibernateMapleDaoFactory.getRefundDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Reward obj) directly
     * @param id Identifier to delete
     */
    public void deleteReward(final Serializable id)  {
        HibernateMapleDaoFactory.getRewardDao().delete(loadReward(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Reward object
     */
    public Reward loadReward(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Reward getReward(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RewardEarlyFunction obj) directly
     * @param id Identifier to delete
     */
    public void deleteRewardEarlyFunction(final Serializable id)  {
        HibernateMapleDaoFactory.getRewardEarlyFunctionDao().delete(loadRewardEarlyFunction(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RewardEarlyFunction object
     */
    public RewardEarlyFunction loadRewardEarlyFunction(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardEarlyFunctionDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public RewardEarlyFunction getRewardEarlyFunction(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardEarlyFunctionDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RewardLateFunction obj) directly
     * @param id Identifier to delete
     */
    public void deleteRewardLateFunction(final Serializable id)  {
        HibernateMapleDaoFactory.getRewardLateFunctionDao().delete(loadRewardLateFunction(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RewardLateFunction object
     */
    public RewardLateFunction loadRewardLateFunction(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardLateFunctionDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public RewardLateFunction getRewardLateFunction(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardLateFunctionDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RewardPolicy obj) directly
     * @param id Identifier to delete
     */
    public void deleteRewardPolicy(final Serializable id)  {
        HibernateMapleDaoFactory.getRewardPolicyDao().delete(loadRewardPolicy(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RewardPolicy object
     */
    public RewardPolicy loadRewardPolicy(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardPolicyDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public RewardPolicy getRewardPolicy(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardPolicyDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RewardType obj) directly
     * @param id Identifier to delete
     */
    public void deleteRewardType(final Serializable id)  {
        HibernateMapleDaoFactory.getRewardTypeDao().delete(loadRewardType(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RewardType object
     */
    public RewardType loadRewardType(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardTypeDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public RewardType getRewardType(final Serializable id) {
        return HibernateMapleDaoFactory.getRewardTypeDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Transaction obj) directly
     * @param id Identifier to delete
     */
    public void deleteTransaction(final Serializable id)  {
        HibernateMapleDaoFactory.getTransactionDao().delete(loadTransaction(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Transaction object
     */
    public Transaction loadTransaction(final Serializable id) {
        return HibernateMapleDaoFactory.getTransactionDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public Transaction getTransaction(final Serializable id) {
        return HibernateMapleDaoFactory.getTransactionDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (TransactionItem obj) directly
     * @param id Identifier to delete
     */
    public void deleteTransactionItem(final Serializable id)  {
        HibernateMapleDaoFactory.getTransactionItemDao().delete(loadTransactionItem(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a TransactionItem object
     */
    public TransactionItem loadTransactionItem(final Serializable id) {
        return HibernateMapleDaoFactory.getTransactionItemDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public TransactionItem getTransactionItem(final Serializable id) {
        return HibernateMapleDaoFactory.getTransactionItemDao().get(id);
    }  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (User obj) directly
     * @param id Identifier to delete
     */
    public void deleteUser(final Serializable id)  {
        HibernateMapleDaoFactory.getUserDao().delete(loadUser(id));
    }
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a User object
     */
    public User loadUser(final Serializable id) {
        return HibernateMapleDaoFactory.getUserDao().load(id);
    }
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     public User getUser(final Serializable id) {
        return HibernateMapleDaoFactory.getUserDao().get(id);
    }  
    /** Returns a singleton instance of this class.
     * @return an singleton instance
     */
    public static synchronized DataLayerMaple getInstance() {
        
        if (instance == null) {
        	if (context == null) {
        		throw new IllegalStateException("Context is null. Make sure Spring is initialized.");
        	}
     		instance = (DataLayerMaple) context.getBean("dataLayerMapleImpl");
        }
        
        return instance; 
    }
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     public Query createQuery(final String query) {
        return this.sessionFactory.getCurrentSession().createQuery(query);
    }
    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     public Criteria createCriteria(final String criteria) {
        return this.sessionFactory.getCurrentSession().createCriteria(criteria);
    }
    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     public Query getNamedQuery(final String query) {
        return this.sessionFactory.getCurrentSession().getNamedQuery(query);
    }
    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("unchecked")
	public Criteria createCriteria(Class persistentObject) {
        return this.sessionFactory.getCurrentSession().createCriteria(persistentObject);
    }
    /** Flushes the currently open session.
	*/
	public void flushSession() {
        this.sessionFactory.getCurrentSession().flush();
    }
    /** Clears the currently open session.
	*/
	public void clearSession() {
        this.sessionFactory.getCurrentSession().clear();
    }
    /** Flushes and clears the currently open session.
	*/
	public void flushAndClearSession() {
		flushSession();
		clearSession();
    }
	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	public void replicate(Object obj, ReplicationMode replicationMode) {
		this.sessionFactory.getCurrentSession().replicate(obj, replicationMode);
	}
	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	public Object merge(Object obj) {
		return this.sessionFactory.getCurrentSession().merge(obj);
	}
	/** Returns the current session.
	 * @return the currently active session
	 */
	public Session getCurrentSession() {
		return this.sessionFactory.getCurrentSession();
	}
	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     public SQLQuery createSQLQuery(final String query) {
        return this.sessionFactory.getCurrentSession().createSQLQuery(query);
    }
    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	public void evict(Object obj) {
        this.sessionFactory.getCurrentSession().evict(obj);
    }
    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws HibernateException
     */
	public Object get(Class<?> clazz, Serializable id) throws HibernateException {
        return this.sessionFactory.getCurrentSession().get(clazz, id);
    }	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws HibernateException
     */
	public Object load(Class<?> clazz, Serializable id) throws HibernateException {
        return this.sessionFactory.getCurrentSession().load(clazz, id);  
    }
	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	public void reattachEntityWithNoLock(IPojoGenEntity entity) {
		if (entity != null) {
        		this.sessionFactory.getCurrentSession().lock(entity, LockMode.NONE);
    		}
	}
	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	public void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities) {
   		if (entities != null) {
		       for (IPojoGenEntity entity : entities) {
            		this.sessionFactory.getCurrentSession().lock(entity, LockMode.NONE);
        		 }
    		}
	}}

