package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.CountryCurrency;
import com.gnoras.maple.dal.model.CurrencyName;
import com.gnoras.maple.dal.model.Offering;
import com.gnoras.maple.dal.model.interfaces.ICurrency;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: currency.
 * @author autogenerated
 */

@Entity
@Table(name = "currency", catalog = "maple")
public class Currency implements Cloneable, Serializable, IPojoGenEntity, ICurrency {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024040L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<CountryCurrency> countryCurrencies = new HashSet<CountryCurrency>();

	/** Field mapping. */
	private Set<CurrencyName> currencyNames = new HashSet<CurrencyName>();

	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String iso4217;
	/** Field mapping. */
	private Set<Offering> offerings = new HashSet<Offering>();

	/** Field mapping. */
	private String symbol;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Currency() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Currency(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param iso4217 String object;
	 * @param symbol String object;
	 */
	public Currency(Integer id, String iso4217, String symbol) {

		this.id = id;
		this.iso4217 = iso4217;
		this.symbol = symbol;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Currency.class;
	}
 

    /**
     * Return the value associated with the column: countryCurrency.
	 * @return A Set&lt;CountryCurrency&gt; object (this.countryCurrency)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "currency"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<CountryCurrency> getCountryCurrencies() {
		return this.countryCurrencies;
		
	}
	
	/**
	 * Adds a bi-directional link of type CountryCurrency to the countryCurrencies set.
	 * @param countryCurrency item to add
	 */
	public void addCountryCurrency(CountryCurrency countryCurrency) {
		countryCurrency.setCurrency(this);
		this.countryCurrencies.add(countryCurrency);
	}

  
    /**  
     * Set the value related to the column: countryCurrency.
	 * @param countryCurrency the countryCurrency value you wish to set
	 */
	public void setCountryCurrencies(final Set<CountryCurrency> countryCurrency) {
		this.countryCurrencies = countryCurrency;
	}

    /**
     * Return the value associated with the column: currencyName.
	 * @return A Set&lt;CurrencyName&gt; object (this.currencyName)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "currency"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<CurrencyName> getCurrencyNames() {
		return this.currencyNames;
		
	}
	
	/**
	 * Adds a bi-directional link of type CurrencyName to the currencyNames set.
	 * @param currencyName item to add
	 */
	public void addCurrencyName(CurrencyName currencyName) {
		currencyName.setCurrency(this);
		this.currencyNames.add(currencyName);
	}

  
    /**  
     * Set the value related to the column: currencyName.
	 * @param currencyName the currencyName value you wish to set
	 */
	public void setCurrencyNames(final Set<CurrencyName> currencyName) {
		this.currencyNames = currencyName;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Mandatory
	@Column( name = "id"  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: iso4217.
	 * @return A String object (this.iso4217)
	 */
	@Mandatory
	@Length(max=3)
	@Column( length = 3  )
	public String getIso4217() {
		return this.iso4217;
		
	}
	

  
    /**  
     * Set the value related to the column: iso4217.
	 * @param iso4217 the iso4217 value you wish to set
	 */
	public void setIso4217(final String iso4217) {
		this.iso4217 = iso4217;
	}

    /**
     * Return the value associated with the column: offering.
	 * @return A Set&lt;Offering&gt; object (this.offering)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "currency"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<Offering> getOfferings() {
		return this.offerings;
		
	}
	
	/**
	 * Adds a bi-directional link of type Offering to the offerings set.
	 * @param offering item to add
	 */
	public void addOffering(Offering offering) {
		offering.setCurrency(this);
		this.offerings.add(offering);
	}

  
    /**  
     * Set the value related to the column: offering.
	 * @param offering the offering value you wish to set
	 */
	public void setOfferings(final Set<Offering> offering) {
		this.offerings = offering;
	}

    /**
     * Return the value associated with the column: symbol.
	 * @return A String object (this.symbol)
	 */
	@Mandatory
	@Length(max=4)
	@Column( length = 4  )
	public String getSymbol() {
		return this.symbol;
		
	}
	

  
    /**  
     * Set the value related to the column: symbol.
	 * @param symbol the symbol value you wish to set
	 */
	public void setSymbol(final String symbol) {
		this.symbol = symbol;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Currency clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Currency copy = new Currency();

		if (this.getCountryCurrencies() != null) {
			copy.getCountryCurrencies().addAll(this.getCountryCurrencies());
		}
		if (this.getCurrencyNames() != null) {
			copy.getCurrencyNames().addAll(this.getCurrencyNames());
		}
		copy.setId(this.getId());
		copy.setIso4217(this.getIso4217());
		if (this.getOfferings() != null) {
			copy.getOfferings().addAll(this.getOfferings());
		}
		copy.setSymbol(this.getSymbol());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("iso4217: " + this.getIso4217() + ", ");
		sb.append("symbol: " + this.getSymbol());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Currency that; 
		try {
			that = (Currency) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getIso4217() == null) && (that.getIso4217() == null)) || (getIso4217() != null && getIso4217().equals(that.getIso4217())));
		result = result && (((getSymbol() == null) && (that.getSymbol() == null)) || (getSymbol() != null && getSymbol().equals(that.getSymbol())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	
	

	
}
