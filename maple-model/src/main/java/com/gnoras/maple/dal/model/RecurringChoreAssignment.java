package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.interfaces.IRecurringChoreAssignment;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: recurring_chore_assignment.
 * @author autogenerated
 */

@Entity
@Table(name = "recurring_chore_assignment", catalog = "maple")
public class RecurringChoreAssignment implements Cloneable, Serializable, IPojoGenEntity, IRecurringChoreAssignment {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024019L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Child child;
	/** Field mapping. */
	private Chore chore;
	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private Integer recurrArg1;
	/** Field mapping. */
	private Integer recurrArg2;
	/** Field mapping. */
	private Integer recurrNTimes;
	/** Field mapping. */
	private Integer recurrType;
	/** Field mapping. */
	private Long recurrUntil;
	/** Field mapping. */
	private Long startAt;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public RecurringChoreAssignment() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public RecurringChoreAssignment(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param child Child object;
	 * @param chore Chore object;
	 * @param id String object;
	 * @param recurrArg1 Integer object;
	 * @param recurrArg2 Integer object;
	 * @param recurrNTimes Integer object;
	 * @param recurrType Integer object;
	 * @param recurrUntil Long object;
	 * @param startAt Long object;
	 */
	public RecurringChoreAssignment(Child child, Chore chore, String id, 					
			Integer recurrArg1, Integer recurrArg2, Integer recurrNTimes, 					
			Integer recurrType, Long recurrUntil, Long startAt) {

		this.child = child;
		this.chore = chore;
		this.id = id;
		this.recurrArg1 = recurrArg1;
		this.recurrArg2 = recurrArg2;
		this.recurrNTimes = recurrNTimes;
		this.recurrType = recurrType;
		this.recurrUntil = recurrUntil;
		this.startAt = startAt;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return RecurringChoreAssignment.class;
	}
 

    /**
     * Return the value associated with the column: child.
	 * @return A Child object (this.child)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "child_id" )
	@Valid
	public Child getChild() {
		return this.child;
		
	}
	

  
    /**  
     * Set the value related to the column: child.
	 * @param child the child value you wish to set
	 */
	public void setChild(final Child child) {
		this.child = child;
	}

    /**
     * Return the value associated with the column: chore.
	 * @return A Chore object (this.chore)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "chore_id" )
	@Valid
	public Chore getChore() {
		return this.chore;
		
	}
	

  
    /**  
     * Set the value related to the column: chore.
	 * @param chore the chore value you wish to set
	 */
	public void setChore(final Chore chore) {
		this.chore = chore;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Mandatory
	@Length(max=36)
	@Column( name = "id", length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: recurrArg1.
	 * @return A Integer object (this.recurrArg1)
	 */
	@Mandatory
	@Column( name = "recurr_arg1"  )
	public Integer getRecurrArg1() {
		return this.recurrArg1;
		
	}
	

  
    /**  
     * Set the value related to the column: recurrArg1.
	 * @param recurrArg1 the recurrArg1 value you wish to set
	 */
	public void setRecurrArg1(final Integer recurrArg1) {
		this.recurrArg1 = recurrArg1;
	}

    /**
     * Return the value associated with the column: recurrArg2.
	 * @return A Integer object (this.recurrArg2)
	 */
	@Mandatory
	@Column( name = "recurr_arg2"  )
	public Integer getRecurrArg2() {
		return this.recurrArg2;
		
	}
	

  
    /**  
     * Set the value related to the column: recurrArg2.
	 * @param recurrArg2 the recurrArg2 value you wish to set
	 */
	public void setRecurrArg2(final Integer recurrArg2) {
		this.recurrArg2 = recurrArg2;
	}

    /**
     * Return the value associated with the column: recurrNTimes.
	 * @return A Integer object (this.recurrNTimes)
	 */
	@Mandatory
	@Column( name = "recurr_n_times"  )
	public Integer getRecurrNTimes() {
		return this.recurrNTimes;
		
	}
	

  
    /**  
     * Set the value related to the column: recurrNTimes.
	 * @param recurrNTimes the recurrNTimes value you wish to set
	 */
	public void setRecurrNTimes(final Integer recurrNTimes) {
		this.recurrNTimes = recurrNTimes;
	}

    /**
     * Return the value associated with the column: recurrType.
	 * @return A Integer object (this.recurrType)
	 */
	@Mandatory
	@Column( name = "recurr_type"  )
	public Integer getRecurrType() {
		return this.recurrType;
		
	}
	

  
    /**  
     * Set the value related to the column: recurrType.
	 * @param recurrType the recurrType value you wish to set
	 */
	public void setRecurrType(final Integer recurrType) {
		this.recurrType = recurrType;
	}

    /**
     * Return the value associated with the column: recurrUntil.
	 * @return A Long object (this.recurrUntil)
	 */
	@Mandatory
	@Column( name = "recurr_until"  )
	public Long getRecurrUntil() {
		return this.recurrUntil;
		
	}
	

  
    /**  
     * Set the value related to the column: recurrUntil.
	 * @param recurrUntil the recurrUntil value you wish to set
	 */
	public void setRecurrUntil(final Long recurrUntil) {
		this.recurrUntil = recurrUntil;
	}

    /**
     * Return the value associated with the column: startAt.
	 * @return A Long object (this.startAt)
	 */
	@Mandatory
	@Column( name = "start_at"  )
	public Long getStartAt() {
		return this.startAt;
		
	}
	

  
    /**  
     * Set the value related to the column: startAt.
	 * @param startAt the startAt value you wish to set
	 */
	public void setStartAt(final Long startAt) {
		this.startAt = startAt;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public RecurringChoreAssignment clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final RecurringChoreAssignment copy = new RecurringChoreAssignment();

		copy.setChild(this.getChild());
		copy.setChore(this.getChore());
		copy.setId(this.getId());
		copy.setRecurrArg1(this.getRecurrArg1());
		copy.setRecurrArg2(this.getRecurrArg2());
		copy.setRecurrNTimes(this.getRecurrNTimes());
		copy.setRecurrType(this.getRecurrType());
		copy.setRecurrUntil(this.getRecurrUntil());
		copy.setStartAt(this.getStartAt());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("recurrArg1: " + this.getRecurrArg1() + ", ");
		sb.append("recurrArg2: " + this.getRecurrArg2() + ", ");
		sb.append("recurrNTimes: " + this.getRecurrNTimes() + ", ");
		sb.append("recurrType: " + this.getRecurrType() + ", ");
		sb.append("recurrUntil: " + this.getRecurrUntil() + ", ");
		sb.append("startAt: " + this.getStartAt());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final RecurringChoreAssignment that; 
		try {
			that = (RecurringChoreAssignment) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getChild() == null) && (that.getChild() == null)) || (getChild() != null && getChild().equals(that.getChild())));
		result = result && (((getChore() == null) && (that.getChore() == null)) || (getChore() != null && getChore().equals(that.getChore())));
		result = result && (((getRecurrArg1() == null) && (that.getRecurrArg1() == null)) || (getRecurrArg1() != null && getRecurrArg1().equals(that.getRecurrArg1())));
		result = result && (((getRecurrArg2() == null) && (that.getRecurrArg2() == null)) || (getRecurrArg2() != null && getRecurrArg2().equals(that.getRecurrArg2())));
		result = result && (((getRecurrNTimes() == null) && (that.getRecurrNTimes() == null)) || (getRecurrNTimes() != null && getRecurrNTimes().equals(that.getRecurrNTimes())));
		result = result && (((getRecurrType() == null) && (that.getRecurrType() == null)) || (getRecurrType() != null && getRecurrType().equals(that.getRecurrType())));
		result = result && (((getRecurrUntil() == null) && (that.getRecurrUntil() == null)) || (getRecurrUntil() != null && getRecurrUntil().equals(that.getRecurrUntil())));
		result = result && (((getStartAt() == null) && (that.getStartAt() == null)) || (getStartAt() != null && getStartAt().equals(that.getStartAt())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	
	

	
}
