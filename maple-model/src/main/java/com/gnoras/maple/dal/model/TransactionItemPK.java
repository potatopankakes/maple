package com.gnoras.maple.dal.model;

import com.gnoras.maple.dal.model.interfaces.ITransactionItemPK;
import java.io.Serializable;
import javax.persistence.CascadeType;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;


/** 
 * Object mapping for hibernate-handled table: transaction_item.
 * @author autogenerated
 */

@Embeddable
public class TransactionItemPK implements Cloneable, Serializable,  ITransactionItemPK {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024009L;
	

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "purchase_id", nullable = true  , insertable = false, updatable = false )
	private Purchase purchase;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "refund_id", nullable = true  , insertable = false, updatable = false )
	private Refund refund;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "transaction_id" , insertable = false, updatable = false )
	private Transaction transaction;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return TransactionItemPK.class;
	}
 

    /**
     * Return the value associated with the column: purchase.
	 * @return A Purchase object (this.purchase)
	 */
	public Purchase getPurchase() {
		return this.purchase;
		
	}
	

  
    /**  
     * Set the value related to the column: purchase.
	 * @param purchase the purchase value you wish to set
	 */
	public void setPurchase(final Purchase purchase) {
		this.purchase = purchase;
	}

    /**
     * Return the value associated with the column: refund.
	 * @return A Refund object (this.refund)
	 */
	public Refund getRefund() {
		return this.refund;
		
	}
	

  
    /**  
     * Set the value related to the column: refund.
	 * @param refund the refund value you wish to set
	 */
	public void setRefund(final Refund refund) {
		this.refund = refund;
	}

    /**
     * Return the value associated with the column: transaction.
	 * @return A Transaction object (this.transaction)
	 */
	public Transaction getTransaction() {
		return this.transaction;
		
	}
	

  
    /**  
     * Set the value related to the column: transaction.
	 * @param transaction the transaction value you wish to set
	 */
	public void setTransaction(final Transaction transaction) {
		this.transaction = transaction;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public TransactionItemPK clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final TransactionItemPK copy = new TransactionItemPK();

		copy.setPurchase(this.getPurchase());
		copy.setRefund(this.getRefund());
		copy.setTransaction(this.getTransaction());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final TransactionItemPK that; 
		try {
			that = (TransactionItemPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getPurchase() == null) && (that.getPurchase() == null)) || (getPurchase() != null && getPurchase().equals(that.getPurchase())));
		result = result && (((getRefund() == null) && (that.getRefund() == null)) || (getRefund() != null && getRefund().equals(that.getRefund())));
		result = result && (((getTransaction() == null) && (that.getTransaction() == null)) || (getTransaction() != null && getTransaction().equals(that.getTransaction())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getPurchase().hashCode();
		hash = hash + getRefund().hashCode();
		hash = hash + getTransaction().hashCode();
	return hash;
	}
	
	

	
}
