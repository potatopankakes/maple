package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.CountryName;
import com.gnoras.maple.dal.model.CurrencyName;
import com.gnoras.maple.dal.model.LanguageName;
import com.gnoras.maple.dal.model.PlanText;
import com.gnoras.maple.dal.model.interfaces.ILanguage;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: language.
 * @author autogenerated
 */

@Entity
@Table(name = "language", catalog = "maple")
public class Language implements Cloneable, Serializable, IPojoGenEntity, ILanguage {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024032L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<CountryName> countryNames = new HashSet<CountryName>();

	/** Field mapping. */
	private Set<CurrencyName> currencyNames = new HashSet<CurrencyName>();

	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String iso693A3;
	/** Field mapping. */
	private Set<LanguageName> languageNames = new HashSet<LanguageName>();

	/** Field mapping. */
	private Set<PlanText> planTexts = new HashSet<PlanText>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Language() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Language(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param iso693A3 String object;
	 */
	public Language(Integer id, String iso693A3) {

		this.id = id;
		this.iso693A3 = iso693A3;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Language.class;
	}
 

    /**
     * Return the value associated with the column: countryName.
	 * @return A Set&lt;CountryName&gt; object (this.countryName)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "language"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<CountryName> getCountryNames() {
		return this.countryNames;
		
	}
	
	/**
	 * Adds a bi-directional link of type CountryName to the countryNames set.
	 * @param countryName item to add
	 */
	public void addCountryName(CountryName countryName) {
		countryName.setLanguage(this);
		this.countryNames.add(countryName);
	}

  
    /**  
     * Set the value related to the column: countryName.
	 * @param countryName the countryName value you wish to set
	 */
	public void setCountryNames(final Set<CountryName> countryName) {
		this.countryNames = countryName;
	}

    /**
     * Return the value associated with the column: currencyName.
	 * @return A Set&lt;CurrencyName&gt; object (this.currencyName)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "language"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<CurrencyName> getCurrencyNames() {
		return this.currencyNames;
		
	}
	
	/**
	 * Adds a bi-directional link of type CurrencyName to the currencyNames set.
	 * @param currencyName item to add
	 */
	public void addCurrencyName(CurrencyName currencyName) {
		currencyName.setLanguage(this);
		this.currencyNames.add(currencyName);
	}

  
    /**  
     * Set the value related to the column: currencyName.
	 * @param currencyName the currencyName value you wish to set
	 */
	public void setCurrencyNames(final Set<CurrencyName> currencyName) {
		this.currencyNames = currencyName;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Mandatory
	@Column( name = "id"  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: iso693A3.
	 * @return A String object (this.iso693A3)
	 */
	@Mandatory
	@Length(max=3)
	@Column( name = "iso693_a3", length = 3  )
	public String getIso693A3() {
		return this.iso693A3;
		
	}
	

  
    /**  
     * Set the value related to the column: iso693A3.
	 * @param iso693A3 the iso693A3 value you wish to set
	 */
	public void setIso693A3(final String iso693A3) {
		this.iso693A3 = iso693A3;
	}

    /**
     * Return the value associated with the column: languageName.
	 * @return A Set&lt;LanguageName&gt; object (this.languageName)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "language"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<LanguageName> getLanguageNames() {
		return this.languageNames;
		
	}
	
	/**
	 * Adds a bi-directional link of type LanguageName to the languageNames set.
	 * @param languageName item to add
	 */
	public void addLanguageName(LanguageName languageName) {
		languageName.setLanguage(this);
		this.languageNames.add(languageName);
	}

  
    /**  
     * Set the value related to the column: languageName.
	 * @param languageName the languageName value you wish to set
	 */
	public void setLanguageNames(final Set<LanguageName> languageName) {
		this.languageNames = languageName;
	}

    /**
     * Return the value associated with the column: planText.
	 * @return A Set&lt;PlanText&gt; object (this.planText)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "language"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<PlanText> getPlanTexts() {
		return this.planTexts;
		
	}
	
	/**
	 * Adds a bi-directional link of type PlanText to the planTexts set.
	 * @param planText item to add
	 */
	public void addPlanText(PlanText planText) {
		planText.setLanguage(this);
		this.planTexts.add(planText);
	}

  
    /**  
     * Set the value related to the column: planText.
	 * @param planText the planText value you wish to set
	 */
	public void setPlanTexts(final Set<PlanText> planText) {
		this.planTexts = planText;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Language clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Language copy = new Language();

		if (this.getCountryNames() != null) {
			copy.getCountryNames().addAll(this.getCountryNames());
		}
		if (this.getCurrencyNames() != null) {
			copy.getCurrencyNames().addAll(this.getCurrencyNames());
		}
		copy.setId(this.getId());
		copy.setIso693A3(this.getIso693A3());
		if (this.getLanguageNames() != null) {
			copy.getLanguageNames().addAll(this.getLanguageNames());
		}
		if (this.getPlanTexts() != null) {
			copy.getPlanTexts().addAll(this.getPlanTexts());
		}
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("iso693A3: " + this.getIso693A3() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Language that; 
		try {
			that = (Language) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getIso693A3() == null) && (that.getIso693A3() == null)) || (getIso693A3() != null && getIso693A3().equals(that.getIso693A3())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	
	

	
}
