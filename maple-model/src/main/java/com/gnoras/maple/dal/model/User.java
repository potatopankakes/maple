package com.gnoras.maple.dal.model;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.felees.hbnpojogen.persistence.validator.Mandatory;
import com.gnoras.maple.dal.model.Child;
import com.gnoras.maple.dal.model.EmailAddress;
import com.gnoras.maple.dal.model.GroupMember;
import com.gnoras.maple.dal.model.Parent;
import com.gnoras.maple.dal.model.interfaces.IUser;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.validator.Length;
import org.hibernate.validator.Valid;


/** 
 * Object mapping for hibernate-handled table: user.
 * @author autogenerated
 */

@Entity
@Table(name = "user", catalog = "maple")
public class User implements Cloneable, Serializable, IPojoGenEntity, IUser {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559024008L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Set<Child> children = new HashSet<Child>();

	/** Field mapping. */
	private Long createdAt;
	/** Field mapping. */
	private Long deletedAt;
	/** Field mapping. */
	private Set<EmailAddress> emailAddresses = new HashSet<EmailAddress>();

	/** Field mapping. */
	private Set<GroupMember> groupMembers = new HashSet<GroupMember>();

	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private Set<Parent> parents = new HashSet<Parent>();

	/** Field mapping. */
	private Byte[] password;
	/** Field mapping. */
	private Byte[] salt;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public User() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public User(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createdAt Long object;
	 * @param deletedAt Long object;
	 * @param id String object;
	 * @param name String object;
	 * @param password Byte[] object;
	 * @param salt Byte[] object;
	 */
	public User(Long createdAt, Long deletedAt, String id, 					
			String name, Byte[] password, Byte[] salt) {

		this.createdAt = createdAt;
		this.deletedAt = deletedAt;
		this.id = id;
		this.name = name;
		this.password = password;
		this.salt = salt;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return User.class;
	}
 

    /**
     * Return the value associated with the column: child.
	 * @return A Set&lt;Child&gt; object (this.child)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<Child> getChildren() {
		return this.children;
		
	}
	
	/**
	 * Adds a bi-directional link of type Child to the children set.
	 * @param child item to add
	 */
	public void addChild(Child child) {
		child.setUser(this);
		this.children.add(child);
	}

  
    /**  
     * Set the value related to the column: child.
	 * @param child the child value you wish to set
	 */
	public void setChildren(final Set<Child> child) {
		this.children = child;
	}

    /**
     * Return the value associated with the column: createdAt.
	 * @return A Long object (this.createdAt)
	 */
	@Mandatory
	@Column( name = "created_at"  )
	public Long getCreatedAt() {
		return this.createdAt;
		
	}
	

  
    /**  
     * Set the value related to the column: createdAt.
	 * @param createdAt the createdAt value you wish to set
	 */
	public void setCreatedAt(final Long createdAt) {
		this.createdAt = createdAt;
	}

    /**
     * Return the value associated with the column: deletedAt.
	 * @return A Long object (this.deletedAt)
	 */
	@Mandatory
	@Column( name = "deleted_at"  )
	public Long getDeletedAt() {
		return this.deletedAt;
		
	}
	

  
    /**  
     * Set the value related to the column: deletedAt.
	 * @param deletedAt the deletedAt value you wish to set
	 */
	public void setDeletedAt(final Long deletedAt) {
		this.deletedAt = deletedAt;
	}

    /**
     * Return the value associated with the column: emailAddress.
	 * @return A Set&lt;EmailAddress&gt; object (this.emailAddress)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<EmailAddress> getEmailAddresses() {
		return this.emailAddresses;
		
	}
	
	/**
	 * Adds a bi-directional link of type EmailAddress to the emailAddresses set.
	 * @param emailAddress item to add
	 */
	public void addEmailAddress(EmailAddress emailAddress) {
		emailAddress.setUser(this);
		this.emailAddresses.add(emailAddress);
	}

  
    /**  
     * Set the value related to the column: emailAddress.
	 * @param emailAddress the emailAddress value you wish to set
	 */
	public void setEmailAddresses(final Set<EmailAddress> emailAddress) {
		this.emailAddresses = emailAddress;
	}

    /**
     * Return the value associated with the column: groupMember.
	 * @return A Set&lt;GroupMember&gt; object (this.groupMember)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<GroupMember> getGroupMembers() {
		return this.groupMembers;
		
	}
	
	/**
	 * Adds a bi-directional link of type GroupMember to the groupMembers set.
	 * @param groupMember item to add
	 */
	public void addGroupMember(GroupMember groupMember) {
		groupMember.setUser(this);
		this.groupMembers.add(groupMember);
	}

  
    /**  
     * Set the value related to the column: groupMember.
	 * @param groupMember the groupMember value you wish to set
	 */
	public void setGroupMembers(final Set<GroupMember> groupMember) {
		this.groupMembers = groupMember;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Mandatory
	@Length(max=36)
	@Column( name = "id", length = 36  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Mandatory
	@Length(max=50)
	@Column( length = 50  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: parent.
	 * @return A Set&lt;Parent&gt; object (this.parent)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Valid
	public Set<Parent> getParents() {
		return this.parents;
		
	}
	
	/**
	 * Adds a bi-directional link of type Parent to the parents set.
	 * @param parent item to add
	 */
	public void addParent(Parent parent) {
		parent.setUser(this);
		this.parents.add(parent);
	}

  
    /**  
     * Set the value related to the column: parent.
	 * @param parent the parent value you wish to set
	 */
	public void setParents(final Set<Parent> parent) {
		this.parents = parent;
	}

    /**
     * Return the value associated with the column: password.
	 * @return A Byte[] object (this.password)
	 */
	@Mandatory
	public Byte[] getPassword() {
		return this.password;
		
	}
	

  
    /**  
     * Set the value related to the column: password.
	 * @param password the password value you wish to set
	 */
	public void setPassword(final Byte[] password) {
		this.password = password;
	}

    /**
     * Return the value associated with the column: salt.
	 * @return A Byte[] object (this.salt)
	 */
	@Mandatory
	public Byte[] getSalt() {
		return this.salt;
		
	}
	

  
    /**  
     * Set the value related to the column: salt.
	 * @param salt the salt value you wish to set
	 */
	public void setSalt(final Byte[] salt) {
		this.salt = salt;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public User clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final User copy = new User();

		if (this.getChildren() != null) {
			copy.getChildren().addAll(this.getChildren());
		}
		copy.setCreatedAt(this.getCreatedAt());
		copy.setDeletedAt(this.getDeletedAt());
		if (this.getEmailAddresses() != null) {
			copy.getEmailAddresses().addAll(this.getEmailAddresses());
		}
		if (this.getGroupMembers() != null) {
			copy.getGroupMembers().addAll(this.getGroupMembers());
		}
		copy.setId(this.getId());
		copy.setName(this.getName());
		if (this.getParents() != null) {
			copy.getParents().addAll(this.getParents());
		}
		copy.setPassword(this.getPassword());
		copy.setSalt(this.getSalt());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createdAt: " + this.getCreatedAt() + ", ");
		sb.append("deletedAt: " + this.getDeletedAt() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("password: " + (this.password == null ? null : Arrays.toString(this.getPassword())) + ", ");
		sb.append("salt: " + (this.salt == null ? null : Arrays.toString(this.getSalt())));
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final User that; 
		try {
			that = (User) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreatedAt() == null) && (that.getCreatedAt() == null)) || (getCreatedAt() != null && getCreatedAt().equals(that.getCreatedAt())));
		result = result && (((getDeletedAt() == null) && (that.getDeletedAt() == null)) || (getDeletedAt() != null && getDeletedAt().equals(that.getDeletedAt())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getPassword() == null) && (that.getPassword() == null)) || (getPassword() != null && getPassword().equals(that.getPassword())));
		result = result && (((getSalt() == null) && (that.getSalt() == null)) || (getSalt() != null && getSalt().equals(that.getSalt())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	
	

	
}
